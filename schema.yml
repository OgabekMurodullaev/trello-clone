openapi: 3.0.3
info:
  title: Trello Clone Project API
  version: 1.0.0
  description: Description
paths:
  /auth/login/:
    post:
      operationId: auth_login_create
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Login'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Login'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Login'
        required: true
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Login'
          description: ''
  /auth/register/:
    post:
      operationId: auth_register_create
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegister'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserRegister'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserRegister'
        required: true
      security:
      - jwtAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserRegister'
          description: ''
  /auth/token/refresh/:
    post:
      operationId: auth_token_refresh_create
      description: |-
        Takes a refresh type JSON web token and returns an access type JSON web
        token if the refresh token is valid.
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenRefresh'
          description: ''
  /boards/{id}/:
    get:
      operationId: boards_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: Board ID
        required: true
      tags:
      - boards
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Board'
          description: ''
  /boards/boards/:
    get:
      operationId: boards_boards_list
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: Board ID
        required: true
      tags:
      - boards
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Board'
          description: ''
    post:
      operationId: boards_boards_create
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: Board ID
        required: true
      tags:
      - boards
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Board'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Board'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Board'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Board'
          description: ''
  /boards/boards/{id}/:
    get:
      operationId: boards_boards_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: Board ID
        required: true
      tags:
      - boards
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Board'
          description: ''
    put:
      operationId: boards_boards_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: Board ID
        required: true
      tags:
      - boards
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Board'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Board'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Board'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Board'
          description: ''
    patch:
      operationId: boards_boards_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: Board ID
        required: true
      tags:
      - boards
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedBoard'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedBoard'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedBoard'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Board'
          description: ''
    delete:
      operationId: boards_boards_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: Board ID
        required: true
      tags:
      - boards
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /workspaces/:
    get:
      operationId: workspaces_list
      tags:
      - workspaces
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Workspace'
          description: ''
    post:
      operationId: workspaces_create
      tags:
      - workspaces
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Workspace'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Workspace'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Workspace'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Workspace'
          description: ''
  /workspaces/{id}/:
    get:
      operationId: workspaces_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - workspaces
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Workspace'
          description: ''
    put:
      operationId: workspaces_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - workspaces
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Workspace'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Workspace'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Workspace'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Workspace'
          description: ''
    patch:
      operationId: workspaces_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - workspaces
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedWorkspace'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedWorkspace'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedWorkspace'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Workspace'
          description: ''
    delete:
      operationId: workspaces_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - workspaces
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /workspaces/{workspace_id}/accept/{email}/:
    post:
      operationId: workspaces_accept_create
      parameters:
      - in: path
        name: email
        schema:
          type: string
        required: true
      - in: path
        name: workspace_id
        schema:
          type: integer
        required: true
      tags:
      - workspaces
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InviteMember'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/InviteMember'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/InviteMember'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InviteMember'
          description: ''
  /workspaces/{workspace_id}/invite-member/:
    post:
      operationId: workspaces_invite_member_create
      parameters:
      - in: path
        name: workspace_id
        schema:
          type: integer
        required: true
      tags:
      - workspaces
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InviteMember'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/InviteMember'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/InviteMember'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InviteMember'
          description: ''
  /workspaces/{workspace_id}/reject/{email}/:
    post:
      operationId: workspaces_reject_create
      parameters:
      - in: path
        name: email
        schema:
          type: string
        required: true
      - in: path
        name: workspace_id
        schema:
          type: integer
        required: true
      tags:
      - workspaces
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InviteMember'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/InviteMember'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/InviteMember'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InviteMember'
          description: ''
  /workspaces/{workspace_id}/remove-member/{member_id}/:
    delete:
      operationId: workspaces_remove_member_destroy
      parameters:
      - in: path
        name: member_id
        schema:
          type: integer
        required: true
      - in: path
        name: workspace_id
        schema:
          type: integer
        required: true
      tags:
      - workspaces
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
components:
  schemas:
    Board:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        title:
          type: string
          maxLength: 120
        workspace:
          allOf:
          - $ref: '#/components/schemas/Workspace'
          readOnly: true
        workspace_id:
          type: integer
          writeOnly: true
        visibility:
          $ref: '#/components/schemas/VisibilityEnum'
        background:
          type: string
          format: uri
          nullable: true
      required:
      - id
      - title
      - workspace
      - workspace_id
    InviteMember:
      type: object
      properties:
        email:
          type: string
          format: email
      required:
      - email
    Login:
      type: object
      properties:
        email:
          type: string
          format: email
          writeOnly: true
        password:
          type: string
          writeOnly: true
      required:
      - email
      - password
    PatchedBoard:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        title:
          type: string
          maxLength: 120
        workspace:
          allOf:
          - $ref: '#/components/schemas/Workspace'
          readOnly: true
        workspace_id:
          type: integer
          writeOnly: true
        visibility:
          $ref: '#/components/schemas/VisibilityEnum'
        background:
          type: string
          format: uri
          nullable: true
    PatchedWorkspace:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 150
        owner:
          type: integer
          readOnly: true
        owner_email:
          type: string
          format: email
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
    TokenRefresh:
      type: object
      properties:
        access:
          type: string
          readOnly: true
        refresh:
          type: string
          writeOnly: true
      required:
      - access
      - refresh
    UserRegister:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        first_name:
          type: string
          maxLength: 150
        last_name:
          type: string
          maxLength: 150
        email:
          type: string
          format: email
          maxLength: 254
        password:
          type: string
          writeOnly: true
          maxLength: 128
      required:
      - email
      - id
      - password
    VisibilityEnum:
      enum:
      - private
      - public
      - workspace
      type: string
      description: |-
        * `private` - Private
        * `public` - Public
        * `workspace` - Workspace
    Workspace:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 150
        owner:
          type: integer
          readOnly: true
        owner_email:
          type: string
          format: email
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - created_at
      - id
      - name
      - owner
      - owner_email
  securitySchemes:
    jwtAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
